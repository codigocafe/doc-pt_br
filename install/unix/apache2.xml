<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b0dd627899cf5c57d3d64fac07e9b6579dfca082 Maintainer: ae Status: ready --><!-- CREDITS: ernani,narigone,ae,dtgfranca,leonardolara -->
<sect1 xml:id="install.unix.apache2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Apache 2.0 em sistemas Unix</title>
 <para>
  Esta seção contém notas e dicas específicas para a instalação do PHP no Apache 2.x
  em sistemas Unix.
 </para>

 &warn.apache2.compat;

 <para>
  A <link xlink:href="&url.apache2.docs;">documentação do Apache</link>
  é a fonte mais importante sobre o servidor Apache 2.x.
  Mais informações sobre opções de instalação podem ser encontradas
  lá.
 </para>

 <para>
  A versão mais recente do servidor Apache HTTP pode ser obtida do
  <link xlink:href="&url.apache;">site de download Apache</link>,
  e uma versão correspondente do PHP pode ser obtida dos locais mencionados anteriormente.
  Esse guia rápido cobre apenas o básico para iniciar o Apache 2.x
  e PHP. Para mais informações leia a
  <link xlink:href="&url.apache2.docs;">documentação do Apache</link>.
  Os números de versão estão omitidos aqui, para garantir que
  as instruções não fiquem desatualizadas. Nos exemplos abaixo 'NN' deve
  ser substituído com a versão específica do Apache utilizado.
 </para>

 <para>
  Atualmente há duas versões do Apache 2.x. - 2.4 e 2.2.
  Embora haja razões para escolher entre elas, 2.4 é a versão mais
  atual, e aquela recomendada, se essa opção lhe for
  possível. Entretanto as instruções aqui funcionarão para
  ambas as versões 2.4 e 2.2. Importante notar que o Apache httpd 2.2 está no final de sua vida,
  e nenhum novo desenvolvimento ou correções serão realizados nele.
 </para>

 <orderedlist>
  <listitem>
   <para>Obter o Apache HTTP do endereço acima e
    descompactar:</para>

   <informalexample>
    <screen>
<![CDATA[
tar -xzf httpd-2.x.NN.tar.gz
]]>
    </screen>
   </informalexample>
  </listitem>

  <listitem>
   <para>Da mesma forma, obter e descompactar os fontes do PHP:</para>

   <informalexample>
    <screen>
<![CDATA[
tar -xzf php-NN.tar.gz
]]>
    </screen>
   </informalexample>
  </listitem>

  <listitem>
   <para>
    Compilar e instalar o Apache. Consulte a documentação de instalação do Apache
    para mais detalhes/opções de compilação.
   </para>

   <informalexample>
    <screen>
<![CDATA[
cd httpd-2_x_NN
./configure --enable-so
make
make install
]]>
    </screen>
   </informalexample>
  </listitem>

  <listitem>
   <para>
    Agora existe um Apache 2.x.NN disponível em /usr/local/apache2,
    configurado com módulos carregáveis e o MPM prefork padrão.
    Para testar a instalação utilize o procedimento de inicialização
    do servidor Apache. Por exemplo:

    <informalexample>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
     </screen>
    </informalexample>

    e depois pare o servidor para configurar o PHP:

    <informalexample>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl stop
]]>
     </screen>
    </informalexample>
   </para>
  </listitem>

  <listitem>

   <para>
    Agora configure e compile o PHP. Aqui pode-se personalizar o PHP
    com várias opções, por exemplo quais extensões estarão disponíveis. Execute
    ./configure --help para uma lista de opções disponíveis. Em nosso exemplo,
    iremos configurar apenas com suporte ao Apache 2 e MySQL.
   </para>

   <para>
    Se o Apache foi compilado a partir do código-fonte como descrito acima, os exemplos abaixo terão
    caminhos coincidentes do apxs, mas se foi instalado de outra forma, o caminho para o apxs
    precisará ser ajustado. Algumas distribuições renomeiam
    apxs para apxs2.
   </para>
   <informalexample>
    <screen>
<![CDATA[
cd ../php-NN
./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-pdo-mysql
make
make install
]]>
    </screen>
   </informalexample>

   <para>
    Se for decidido modificar as configurações depois da instalação,
    os comandos 'configure', 'make' e 'make install' precisarão ser executados novamente.
    Além disso,
    o Apache precisará ser reinicializado para que o novo módulo seja carregado. Uma recompilação do
    Apache não é necessária.
   </para>

   <para>
    Note que por padrão 'make install' também instalará o PEAR,
    várias ferramentas do PHP como phpize, o PHP CLI, entre outros.
   </para>

  </listitem>

  <listitem>
   <para>
    Configure o php.ini:
   </para>

   <informalexample>
    <screen>
<![CDATA[
cp php.ini-development /usr/local/lib/php.ini
]]>
    </screen>
   </informalexample>

   <para>
    Pode-se de editar o arquivo .ini para configurar o PHP. Se for desejado ter
    um php.ini em outra localização, utilize --with-config-file-path=/some/path no
    passo 5.
   </para>

   <para>
    Se for preferível utilizar o php.ini-production, leia atentamente
    esse arquivo, já que ele modifica o comportamento do PHP.
   </para>

  </listitem>

  <listitem>

   <para>
    Edite o httpd.conf para carregar o módulo do PHP. O caminho à direita
    da instrução LoadModule precisa apontar para o caminho do módulo do PHP
    no sistema. O 'make install' acima pode ter feito isso
    automaticamente, mas é bom confirmar.
   </para>

   <informalexample>
    <para>
     No PHP 8:
    </para>
    <programlisting role="apache-conf">
<![CDATA[
LoadModule php_module modules/libphp.so
]]>
    </programlisting>
   </informalexample>

   <informalexample>
    <para>
     No PHP 7:
    </para>
    <programlisting role="apache-conf">
<![CDATA[
LoadModule php7_module modules/libphp7.so
]]>
    </programlisting>
   </informalexample>

  </listitem>

  <listitem>

   <para>
    Configure o Apache para interpretar certas extensões de arquivos do PHP. Por exemplo, configurar
    o Apache para interpretar arquivos .php. Em vez de utilizar apenas a diretiva Apache AddType,
    é recomendado evitar uploads potencialmente perigosos e nomes de
    arquivos como exploit.php.jpg que possam ser executados pelo PHP. Nesse exemplo,
    pode-se ter qualquer extensão (ou extensões) configuradas.
    Adicionaremos .php como demonstração.
   </para>


   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    Alternativamente, pode-se acrescentar também .php, .php2, .php3, .php4, .php5, .php6 e
    .phtml para ser executado como PHP, desta forma:
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.ph(p[2-6]?|tml)$">
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    Para permitir que arquivos .phps sejam interpretados pelo filtro de fontes do PHP e
    exibidos como código fonte destacado, utilize isso:
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.phps$">
    SetHandler application/x-httpd-php-source
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    mod_rewrite pode ser utilizado para permitir que qualquer arquivo .php seja exibido
    como código fonte destacado, sem ter de renomear ou copiar arquivos
    para a extensão .phps, assim:
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
RewriteEngine On
RewriteRule (.*\.php)s$ $1 [H=application/x-httpd-php-source]
]]>
    </programlisting>
   </informalexample>

   <para>
    O filtro de fontes PHP não deve ser ativado em ambiente de produção, onde
    ele pode expor dados confidenciais ou de outra forma importantes, que estejam
    incluídos no código fonte.
   </para>

  </listitem>

  <listitem>
   <para>
    Depois utilize a forma normal de iniciar o servidor Apache:
   </para>

   <informalexample>
    <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
    </screen>
   </informalexample>

   <para>ou</para>

   <informalexample>
    <screen>
<![CDATA[
service httpd restart
]]>
    </screen>
   </informalexample>

  </listitem>
 </orderedlist>

 <para>
  Seguindo os passos acima, o Apache2 será executado com
  suporte ao PHP como um módulo <literal>SAPI</literal>. Existem muitas outras
  opções de configuração disponíveis para o Apache e para o PHP. Para mais
  informações rode <command>./configure --help</command> no código
  fonte correspondente.
 </para>
 <para>
  O Apache pode ser construído com multithread através da seleção do MPM
  <filename>worker</filename>, em vez do padrão MPM
  <filename>prefork</filename>. Isso é possível
  acrescentado-se o seguinte argumento no ./configure do
  passo 3 acima:
 </para>
 <informalexample>
  <screen>
<![CDATA[
--with-mpm=worker
]]>
  </screen>
 </informalexample>
 <para>
  Isso não deve ser feito sem conhecer as consequências
  dessa decisão, ou pelo menos ter uma boa noção de
  suas implicações. A documentação do Apache
  sobre <link xlink:href="&url.apache2.mpm;">MPM-Modules</link>
  discute essas questões em grandes detalhes.
 </para>
 <note>
  <para>
   A <link linkend="faq.installation.apache.multiviews">Apache MultiViews
   FAQ</link> discute multiviews com o PHP.
  </para>
 </note>
 <note>
  <para>
   Para construir uma versão multithread o sistema destino precisa suportar threads.
   Nesse caso o PHP também deve ser compilado com o Zend Thread Safety (ZTS).
   Nessa configuração nem todas as extensões estarão disponíveis.
   A configuração recomendada é construir o Apache com o módulo MPM
   <filename>prefork</filename> padrão.
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
