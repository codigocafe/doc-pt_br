<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a871ef72edf436c59422dedd538594db2541d5f1 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.socket-create" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_create</refname>
  <refpurpose>Cria um soquete (ponto de extremidade para comunição)</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>Socket</type><type>false</type></type><methodname>socket_create</methodname>
   <methodparam><type>int</type><parameter>domain</parameter></methodparam>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cria e retorna uma instância de <classname>Socket</classname>, também referenciado como um ponto de extremidade
   de comunicação. Uma conexão típica de rede é construída com 2 soquetes, um
   fazendo o papel do cliente, e outro fazendo o papel do servidor.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       O parâmetro <parameter>domain</parameter> (domínio) especifica a família de
       protocolo a ser usada pelo soquete.
      </para>
      <table>
       <title>Famílias de endereços/protocolos disponíveis</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Domínio</entry>
          <entry>Descrição</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>AF_INET</constant></entry>
          <entry>
           Protocolos baseados em Internet IPv4. TCP e UDP são protocolos comuns
           desta família.
          </entry>
         </row>
         <row>
          <entry><constant>AF_INET6</constant></entry>
          <entry>
           Protocolos baseados em Internet IPv6. TCP e UDP são protocolos comuns
           desta família.
          </entry>
         </row>
         <row>
          <entry><constant>AF_UNIX</constant></entry>
          <entry>
           Família de protocolos de comunicação local. Alta eficiência e pouca
           sobrecarga fazem dela uma ótima forma de IPC (Comunicação Entre Processos, da sigla em inglês).
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       O parâmetro <parameter>type</parameter> seleciona o tipo de comunicação a
       ser usada pelo soquete.
      </para>
      <table>
       <title>Tipos de soquete disponíveis</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Tipo</entry>
          <entry>Descrição</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>SOCK_STREAM</constant></entry>
          <entry>
           Fornece fluxos de byte sequenciais, confiáveis, bidirecionais simultâneos, baseados em conexão.
           Um mecanismo de transmissão de dados fora-de-banda pode ser suportado.
           O protocolo TCP é baseado neste tipo de soquete.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_DGRAM</constant></entry>
          <entry>
           Suporta datagramas (mensagens sem uma conexão e não confiáveis ​​de comprimento máximo fixo).
           O protocolo UDP é baseado neste tipo de soquete.
          </entry>
         </row>
           <row>
          <entry><constant>SOCK_SEQPACKET</constant></entry>
          <entry>
           Fornece um caminho de transmissão de dados sequencial, confiável e bidirecional baseado em conexão para
           datagramas de comprimento máximo fixo; um consumidor é obrigado a ler um
           pacote inteiro com cada chamada de leitura.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_RAW</constant></entry>
          <entry>
           Fornece acesso bruto ao protocolo de rede. Este tipo especial de soquete
           pode ser usado para construir manualmente qualquer tipo de protocolo. Um uso comum
           para esse tipo de soquete é realizar solicitações ICMP (como "ping").
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_RDM</constant></entry>
          <entry>
           Fornece uma camada de datagrama confiável que não garante a ordenação.
           Na maior parte dos sistemas operacionais isto não está implementado.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>protocol</parameter></term>
     <listitem>
      <para>
       O parâmetro <parameter>protocol</parameter> define o protocolo
       específico dentro do domínio especificado em <parameter>domain</parameter> a ser usado
       durante a comunicação no socket retornado. O valor adequado pode ser
       recuperado por nome usando <function>getprotobyname</function>. Se
       o protocolo desejado for TCP ou UDP, as constantes correspondentes
       <constant>SOL_TCP</constant> e <constant>SOL_UDP</constant>
       também podem ser usadas.
      </para>
      <table>
       <title>Protocolos comuns</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Nome</entry>
          <entry>Descrição</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>icmp</entry>
          <entry>
           O Internet Control Message Protocol é usado principalmente por "gateways"
           e "hosts" para relatar erros na comunicação de datagramas. O comando
           "ping" (presente na maioria dos sistemas operacionais modernos) é um exemplo
           de aplicação do ICMP.
          </entry>
         </row>
         <row>
          <entry>udp</entry>
          <entry>
           O User Datagram Protocol é um protocolo sem conexão e não confiável,
           com comprimentos de registro fixos. Devido a esses aspectos, o UDP
           requer uma quantidade mínima de sobrecarga de protocolo.
          </entry>
         </row>
         <row>
          <entry>tcp</entry>
          <entry>
           O Transmission Control Protocol é um protocolo confiável, baseado em conexão,
           orientado a fluxo e bidirecional simultâneo. O TCP garante que todos os pacotes de dados
           serão recebidos na ordem em que foram enviados. Se algum pacote for perdido de alguma
           forma durante a comunicação, o TCP retransmitirá automaticamente o pacote até que
           o computador de destino reconheça esse pacote. Por razões de confiabilidade e
           desempenho, a própria implementação do TCP decide os limites apropriados do octeto
           da camada de comunicação do datagrama subjacente. Portanto, as aplicações TCP devem
           permitir a possibilidade de transmissão parcial de registros.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>socket_create</function> retorna uma instância de <classname>Socket</classname> em caso de sucesso,
   ou &false; em caso de erro. O código de erro real pode ser recuperado chamando
   <function>socket_last_error</function>. Este código de erro pode ser passado para
   <function>socket_strerror</function> para obter uma explicação textual do
   erro.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se um <parameter>domain</parameter> ou
   <parameter>type</parameter> inválidos forem fornecidos, o padrão de <function>socket_create</function>
   é usar <constant>AF_INET</constant> e
   <constant>SOCK_STREAM</constant> respectivamente e emitir, adicionalmente, uma
   mensagem <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Em caso de sucesso, esta função agora retorna uma instância de <classname>Socket</classname>;
       anteriormente, retornava um <type>resource</type>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_accept</function></member>
    <member><function>socket_bind</function></member>
    <member><function>socket_connect</function></member>
    <member><function>socket_listen</function></member>
    <member><function>socket_last_error</function></member>
    <member><function>socket_strerror</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
