<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1ef9c7a76700b3e72844050d75e6ed1b870f9ca7 Maintainer: leonardolara Status: ready -->

<refentry xml:id="imagick.morphology" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Imagick::morphology</refname>
  <refpurpose>Aplica um kernel fornecido pelo usuário à imagem de acordo com o método de morfologia fornecido</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>Imagick::morphology</methodname>
   <methodparam><type>int</type><parameter>morphologyMethod</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam><type>ImagickKernel</type><parameter>ImagickKernel</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>channel</parameter><initializer>Imagick::CHANNEL_DEFAULT</initializer></methodparam>
  </methodsynopsis>
  <para>
   Aplica um kernel fornecido pelo usuário à imagem de acordo com o método de morfologia fornecido.

  </para>


 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>morphologyMethod</parameter></term>
    <listitem>
     <para>
      Qual método de morfologia usar, uma das constantes \Imagick::MORPHOLOGY_*.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>iterations</parameter></term>
    <listitem>
     <para>
      O número de iterações em que a função de morfologia será aplicada. Um valor de -1 significa repetição até que mais nenhuma alteração seja encontrada. A forma como isso é aplicado pode depender do método de morfologia. Normalmente tem o valor de 1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ImagickKernel</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>channel</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &imagick.return.success;
  </para>
 </refsect1>




 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Imagick::morphology</function> com morfologia de convolução</title>
     <programlisting role="php">
<![CDATA[
<?php
        $imagick = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_GAUSSIAN, "5,1");
        $imagick->morphology(\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);
        header("Content-Type: image/png");
        echo $imagick->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de correlação</title>
     <programlisting role="php">
<![CDATA[
<?php

        // O pixel superior esquerdo deve ser preto
        // O pixel inferior direito deve ser branco
        // O resto não é importante.


        $imagick = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);
        $imagick->morphology(\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);
        header("Content-Type: image/png");
        echo $imagick->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de erosão</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_ERODE, 2, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de erosão de intensidade</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
        $canvas->morphology(\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de dilatação</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_DILATE, 4, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de dilatação de intensidade</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
        $canvas->morphology(\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de distância do kernel Chebyshev</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CHEBYSHEV, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de distância do kernel Manhattan</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_MANHATTAN, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de distância do kernel octogonal</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGONAL, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de distância do kernel euclidiano</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_EUCLIDEAN, "4");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de borda</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de abertura</title>
     <programlisting role="php">
<![CDATA[
<?php
        // Como resultado, será visto que o método de abertura suavizará o contorno, arredondando os pontos afiados, e removerá as partes menores que a forma usada. Também irá desconectar ou abrir todas a pontes finas.
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_OPEN, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de abertura de intensidade</title>
     <programlisting role="php">
<![CDATA[
<?php
        // Como resultado, será visto que o método de abertura suavizará o contorno, arredondando os pontos afiados, e removerá as partes menores que a forma usada. Também irá desconectar ou abrir todas a pontes finas.

        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de fechamento</title>
     <programlisting role="php">
<![CDATA[
<?php
        // O uso básico do método de fechamento é reduzir ou remover quaisquer buracos ou lacunas com tamanho próximo ao do 'Elemento de estrutura' do kernel. Isto é, fechar as partes do plano de fundo que são têm aproximadamente esse tamanho.
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de fechamento de intensidade</title>
     <programlisting role="php">
<![CDATA[
<?php
        // O uso básico do método de fechamento é reduzir ou remover quaisquer buracos ou lacunas com tamanho próximo ao do 'Elemento de estrutura' do kernel. Isto é, fechar as partes do plano de fundo que são têm aproximadamente esse tamanho.
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de suavização</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de bordas para dentro</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title>Edge out <function>Imagick::morphology</function> com morfologia de bordas para fora</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de 'TopHat', ou mais especificamente 'TopHat Branco'. Retorna os pixels que foram removidos por uma abertura da forma, ou seja, os pixels que foram removidos para arredondar os pontos e as pontes de conexão entre as formas.</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de 'BottomHat', também conhecido como 'TopHat Preto'. São os pixels que um fechamento de forma adiciona à imagem. Isto é, os pixels que foram usados ​​para preencher os buracos, lacunas e pontes.</title>
     <programlisting role="php">
<![CDATA[
<?php

        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de acerto e erro</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        // Isto encontra todos os pixels com 3 pixels da borda direita
        $matrix = [[1, false, false, 0]];
        $kernel = \ImagickKernel::fromMatrix(
            $matrix,
            [0, 0]
        );
        $canvas->morphology(\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de desbaste</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
        $rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
        $leftEdgeKernel->addKernel($rightEdgeKernel);

        $canvas->morphology(\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de espessamento</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
        $rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
        $leftEdgeKernel->addKernel($rightEdgeKernel);

        $canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function>com morfologia de espessamento para gerar um casco convexo</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $diamondKernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "1");
        $convexKernel =  \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CONVEX_HULL, "");

        // A morfologia de espessamento não consegue lidar com lacunas pequenas. Eslas são fechadas
        // com a morfologia de fechamento.
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);
        $canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);

        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com morfologia de iteração</title>
     <programlisting role="php">
<![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "2");
        $canvas->morphology(\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

    <example>
    <title><function>Imagick::morphology</function> com função auxiliar para obter silhueta de imagem</title>
     <programlisting role="php">
<![CDATA[
<?php
function getCharacterOutline() {
    $imagick = new \Imagick(realpath("./images/character.png"));
    $character = new \Imagick();
    $character->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:white"
    );
    $canvas = new \Imagick();
    $canvas->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:black"
    );

    $character->compositeimage(
        $imagick,
        \Imagick::COMPOSITE_COPYOPACITY,
        0, 0
    );
    $canvas->compositeimage(
        $character,
        \Imagick::COMPOSITE_ATOP,
        0, 0
    );
    $canvas->setFormat('png');

    return $canvas;
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
