<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ea05e49a99149e86cb472cda4080b166aa084e3e Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<refentry xml:id="mysql-xdevapi-collection.removeone" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Collection::removeOne</refname>
  <refpurpose>Remove um documento da coleção</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mysql_xdevapi\Result</type><methodname>mysql_xdevapi\Collection::removeOne</methodname>
   <methodparam><type>string</type><parameter>id</parameter></methodparam>
  </methodsynopsis>
  <para>
   Remove da coleção o documento com o ID correspondente.
   É um atalho para <code>Collection.remove("_id = :id").bind("id", id).execute()</code>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>id</parameter></term>
    <listitem>
     <para>
      O ID do documento da coleção a ser removido. Tipicamente é o
      _id gerado pelo servidor MySQL quando o registro
      foi inserido.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Um objeto Result que pode ser usado para consultar o número de itens afetados ou o
   número de alertas gerados pela operação.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>mysql_xdevapi\Collection::removeOne</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$session = mysql_xdevapi\getSession("mysqlx://user:password@localhost");

$session->sql("DROP DATABASE IF EXISTS addressbook")->execute();
$session->sql("CREATE DATABASE addressbook")->execute();

$schema     = $session->getSchema("addressbook");
$collection = $schema->createCollection("people");

$result = $collection->add('{"name": "Alfred", "age": 18, "job": "Butler"}')->execute();

// Normalmente o _id é conhecido por outros meios,
// mas para este exemplo vamos buscar o id gerado e usá-lo
$ids       = $result->getGeneratedIds();
$alfred_id = $ids[0];

$result = $collection->removeOne($alfred_id);

if(!$result->getAffectedItemsCount()) {
    echo "Alfred com id $alfred_id não foi removido.";
} else {
    echo "Tchau, Alfred, pode levar o _id $alfred_id com você.";
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Tchau, Alfred, pode levar o _id 00005b6b536100000000000000cb com você.
]]>
   </screen>
  </example>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
