<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5a20fd035d9e63be7ccc3b4ac2e361a10a5add32 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<refentry xml:id="mysql-xdevapi-collection.createindex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Collection::createIndex</refname>
  <refpurpose>Cria índice na coleção</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>mysql_xdevapi\Collection::createIndex</methodname>
   <methodparam><type>string</type><parameter>index_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>index_desc_json</parameter></methodparam>
  </methodsynopsis>
  <para>
    Cria um índice na coleção.
  </para>
  <para>
    Uma exceção é lançada se um índice com o mesmo nome já existir,
    ou se a definição do índice não estiver formada corretamente.
   </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>index_name</parameter></term>
    <listitem>
     <para>
      O nome do índice a ser criado. O nome precisa ser válid da mesma forma que os nomes
      aceitos pela consulta SQL <literal>CREATE INDEX</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>index_desc_json</parameter></term>
    <listitem>
     <para>
      Definição do índice a ser criado. Contém um array de objetos IndexField,
      e cada objeto descreve um único documento membro para incluir no índice
      e uma string opcional para o tipo de índice, que pode ser INDEX (padrão) ou SPATIAL.
     </para>
     <para>
      Uma descrição de um único IndexField consiste nos campos a seguir:
     </para>
     <itemizedlist>
      <listitem>
        <para>
          <code>field</code>: string, o caminho completo para o documento membro ou campo a ser indexado.
        </para>
      </listitem>
      <listitem>
       <para>
        <code>type</code>: string, um dos tipos de coluna suportados pelo SQL para mapear o campo.
        Para tipos numéricos, a palavra-chave opcional UNSIGNED pode ser incluída na sequência.
        Para o tipo TEXT, o comprimento a considerar para a indexação pode ser incluído.
       </para>
      </listitem>
      <listitem>
        <para>
          <code>required</code>: booleano, (opcional) TRUE se for necessário que o campo exista no documento.
          O padrão é &false;, exceto para <literal>GEOJSON</literal> onde o padrão é &true;.
         </para>
       </listitem>
      <listitem>
        <para>
          <code>options</code>: inteiro, (opcional) opções especiais para uso
          durante a decodificação de dados <literal>GEOJSON</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <code>srid</code>: inteiro, (opcional) valor srid para uso durante
          a decodificação de dados <literal>GEOJSON</literal>.
        </para>
      </listitem>
      </itemizedlist>

      <para>
        É um erro incluir outros campos não descritos acima em documentos
        IndexDefinition ou IndexField.
      </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para></para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>mysql_xdevapi\Collection::createIndex</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$session = mysql_xdevapi\getSession("mysqlx://user:password@localhost");
$session->sql("DROP DATABASE IF EXISTS addressbook")->execute();
$session->sql("CREATE DATABASE addressbook")->execute();

$schema     = $session->getSchema("addressbook");
$collection = $schema->createCollection("people");

// Criando um índice de texto
$collection->createIndex(
  'myindex1',
  '{"fields": [{
    "field": "$.name",
    "type": "TEXT(25)",
    "required": true}],
    "unique": false}'
);

// Um índice espacial
$collection->createIndex(
  'myindex2',
  '{"fields": [{
    "field": "$.home",
    "type": "GEOJSON",
    "required": true}],
    "type": "SPATIAL"}'
);

// Índice com múltiplos campos
$collection->createIndex(
  'myindex3',
  '{"fields": [
    {
      "field": "$.name",
      "type": "TEXT(20)",
      "required": true
    },
    {
      "field": "$.age",
      "type": "INTEGER"
    },
    {
      "field": "$.job",
      "type": "TEXT(30)",
      "required": false
    }
  ],
  "unique": true
  }'
);
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
