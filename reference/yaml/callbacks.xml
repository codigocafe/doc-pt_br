<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 80872147aa52367137bd3d168412f70cbe2ddf9c Maintainer: leonardolara Status: ready -->

<chapter xml:id="yaml.callbacks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Funções de retorno</title>

 <section xml:id="yaml.callbacks.parse">
  <title>Funções de retorno de análise</title>
  <para>
   Funções de análise do tipo <type>callable</type> são chamadas pelas funções
   <function>yaml_parse</function>, <function>yaml_parse_file</function> ou
   <function>yaml_parse_url</function> quando uma etiqueta YAML registrada é
   encontrada. A função de retorno recebe o valor da entidade etiquetada, a etiqueta e
   sinalizadores indicando o estilo da entidade escalar. A função deve retornar os dados
   que o analisador YAML deve emitir para esta entidade.
  </para>
  <example>
   <title>Exemplo de função de retorno de análise</title>
   <programlisting role="php">
<![CDATA[
<?php
/**
 * Função de retorno de análise para etiquetas YAML.
 * @param mixed $value Dados do arquivo YAML
 * @param string $tag Etiqueta que disparou a chamada à função
 * @param int $flags Estilo da entidade escalar (consulte YAML_*_SCALAR_STYLE)
 * @return mixed Valor que o analisador YAML deve emitir para o valor fornecido
 */
function tag_callback ($value, $tag, $flags) {
  var_dump(func_get_args()); // depuração
  return "Olá, {$value}";
}

$yaml = <<<YAML
cumprimento: !exemplo/ola Mundo
YAML;

$result = yaml_parse($yaml, 0, $ndocs, array(
    '!exemplo/ola' => 'tag_callback',
  ));

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  [0]=>
  string(5) "Mundo"
  [1]=>
  string(12) "!exemplo/ola"
  [2]=>
  int(1)
}
array(1) {
  ["cumprimento"]=>
  string(10) "Olá, Mundo"
}
]]>
   </screen>
  </example>
 </section>

 <section xml:id="yaml.callbacks.emit">
  <title>Funções de retorno de emissão</title>
  <para>
   Funções de emissão são chamadas quando uma instância de uma classe registrada é
   emitida pelas funções <function>yaml_emit</function> ou
   <function>yaml_emit_file</function>. A função recebe o objeto a
   ser emitido. A função deve retornar um array com duas chaves:
   &quot;<literal>tag</literal>&quot; e &quot;<literal>data</literal>&quot;.
   O valor associado à chave &quot;<literal>tag</literal>&quot; deve
   ser uma string a ser usada como a etiqueta YAML no resultado. O valor associado
   à chave &quot;<literal>data</literal>&quot; será codificado como YAML
   e emitido no lugar do objeto interceptado.
  </para>
  <example>
   <title>Exemplo de função de emissão</title>
   <programlisting role="php">
<![CDATA[
<?php
class EmitExample {
  public $data;    // os dados podem estar em qualquer tipo adequado de pecl/yaml

  public function __construct ($d) {
    $this->data = $d;
  }

  /**
   * Função de emissão Yaml, referida na chamada a yaml_emit por nome de classe.
   *
   * Esperado retornar um array com dois valores:
   *   - 'tag': etiqueta personalizada para esta serialização
   *   - 'data': valor a ser convertido para yaml (array, string, booleano, número)
   *
   * @param object $obj Objeto a ser emitido
   * @return array Etiqueta e dados substitutos a serem emitidos
   */
  public static function yamlEmit (EmitExample $obj) {
    return array(
      'tag' => '!example/emit',
      'data' => $obj->data,
    );
  }
}

$emit_callbacks = array(
  'EmitExample' => array('EmitExample', 'yamlEmit')
);

$t = new EmitExample(array('a','b','c'));
$yaml = yaml_emit(
  array(
    'example' => $t,
  ),
  YAML_ANY_ENCODING,
  YAML_ANY_BREAK,
  $emit_callbacks
);
var_dump($yaml);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
string(43) "---
example: !example/emit
- a
- b
- c
...
"
]]>
   </screen>
  </example>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
