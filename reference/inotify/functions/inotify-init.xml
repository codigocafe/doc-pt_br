<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 37da852aa1f9b754fed577897efa509ef4d578e5 Maintainer: leonardolara Status: ready -->

<refentry xml:id="function.inotify-init" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>inotify_init</refname>
  <refpurpose>Inicializa uma instância do Inotify</refpurpose>
 </refnamediv>

 <refsect1 role="description"><!-- {{{ -->
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>inotify_init</methodname>
   <void />
  </methodsynopsis>
  <para>
   Inicializa uma instância do Inotify para uso com
   <function>inotify_add_watch</function>.
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Um recurso de fluxo ou &false; em caso de erro.
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="inotify-init.example.basic"><!-- {{{ -->
    <title>Exemplo de uso de Inotify</title>
    <programlisting role="php">
<![CDATA[
<?php
// Abre uma instância Inotify
$fd = inotify_init();

// Monitora __FILE__ para alterações de metadados (por exemplo, data/horário de modificação)
$watch_descriptor = inotify_add_watch($fd, __FILE__, IN_ATTRIB);

// Gera um evento
touch(__FILE__);

// Lê os eventos
$events = inotify_read($fd);
print_r($events);

// Os métodos a seguir permitem usar funções Inotify sem bloquear em inotify_read():

// - Usando stream_select() em $fd:
$read = array($fd);
$write = null;
$except = null;
stream_select($read,$write,$except,0);

// - Usando stream_set_blocking() em $fd
stream_set_blocking($fd, 0);
inotify_read($fd); // Não bloqueia e retorna falso se nenhum evento estiver pendente

// - Usando inotify_queue_len() para verificar se a fila de eventos não está vazia
$queue_len = inotify_queue_len($fd); // Se > 0, inotify_read() não irá bloquear

// Encerra o monitoramento __FILE__ para alterações de metadados
inotify_rm_watch($fd, $watch_descriptor);

// Fecha a instância do Inotify
// Isso pode encerrar todos os monitoramentos se isso ainda não tiver sido feito
fclose($fd);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(
  array(
    'wd' => 1,     // Igual a $watch_descriptor
    'mask' => 4,   // Bit IN_ATTRIB definido
    'cookie' => 0, // ID esclusivo para conectar eventos relacionados (ex.:
                   // eventos IN_MOVE_FROM e IN_MOVE_TO)
    'name' => '',  // o nome de um arquivo (ex.: se as alterações são monitoradas
                   // em um diretório)
  ),
);
]]>
    </screen>
   </example><!-- }}} -->
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>inotify_add_watch</function></member>
    <member><function>inotify_rm_watch</function></member>
    <member><function>inotify_queue_len</function></member>
    <member><function>inotify_read</function></member>
    <member><function>fclose</function></member>
   </simplelist>
  </para>
 </refsect1><!-- }}} -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

