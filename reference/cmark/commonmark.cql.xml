<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 38ee86c3c030bc74362a7e5c185192ef8ad5a442 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<reference xml:id="class.commonmark-cql" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe CommonMark\CQL</title>
 <titleabbrev>CommonMark\CQL</titleabbrev>

 <partintro>

<!-- {{{ CommonMark\Parser intro -->
  <section xml:id="commonmark-cql.intro">
   &reftitle.intro;
   <para>
    CommonMark Query Language (CQL) é uma DSL para descrever como navegar por uma árvore de Nós CommonMark implementada como um analisador e compilador para um pequeno conjunto de instruções e uma máquina virtual para executar essas instruções.
   </para>
   <formalpara>
    <title>Paths:</title>
     <para>
      Em sua forma mais simplista, uma consulta CQL combina os caminhos a seguir e o caminho <literal>/</literal> para descrever como navegar em uma árvore:
      <simplelist>
       <member>firstChild</member>
       <member>lastChild</member>
       <member>previous</member>
       <member>next</member>
       <member>parent</member>
      </simplelist>
      Por exemplo, <literal>/firstChild/lastChild</literal> navegaria para o último nó filho (lastChild) do primeiro nó filho (firstChild).
     </para>
   </formalpara>
   <formalpara>
   <title>Laços de repetição</title>
   <para>
    A CQL pode ser instruída para fazer laços de repetição, por exemplo passando pelos filhos ou irmãos de um nó em particular, usando o caminho <literal>children</literal> (filhos), ou <literal>siblings</literal> (irmãos). Por exemplo, <literal>/firstChild/children</literal> navegará para todos os filhos do primeiro nó filho.
   </para>
   </formalpara>
   <formalpara>
    <title>Sub-consultas</title>
     <para>
      A CQL pode ser instruída sobre como navegar usando uma sub-consulta como <literal>[/firstChild]</literal>. Por exemplo, <literal>/firstChild/children[/firstChild]</literal> navegará até o primeiro nó filho de todos os filhos do primeiro nó filho.
     </para>
   </formalpara>
   <formalpara>
    <title>Restrições nos Laços</title>
     <para>
      Durante um laço de repetição, a CQL pode ser instruída a restringir o caminho percorrido a nós de um determinado tipo. Por exemplo, <literal>/children(BlockQuote)</literal> navegará até os filhos de um nó onde o tipo seja <literal>BlockQuote</literal>. Os tipos a seguir são reconhecidos (insensíveis a maiúsculas/minúsculas):
      <simplelist>
       <member>BlockQuote</member>
       <member>List</member>
       <member>Item</member>
       <member>CodeBlock</member>
       <member>HtmlBlock</member>
       <member>CustomBlock</member>
       <member>Paragraph</member>
       <member>Heading</member>
       <member>ThematicBreak</member>
       <member>Text</member>
       <member>SoftBreak</member>
       <member>LineBreak</member>
       <member>Code</member>
       <member>HtmlInline</member>
       <member>CustomInline</member>
       <member>Emphasis</member>
       <member>Strong</member>
       <member>Link</member>
       <member>Image</member>
      </simplelist>
      Tipos podem ser usados como uma união, por exemplo, <literal>/children(BlockQuote|List)</literal> navegará até os filhos de um nó onde o tipo seja <literal>BlockQuote</literal> ou <literal>List</literal>. Tipos ou uniões de tipos também podem ser negados. Por exemplo, <literal>/children(~BlockQuote)</literal> navegará até os filhos de um nó onde o tipo não seja <literal>BlockQuote</literal>, e <literal>/children(~BlockQuote|Paragraph)</literal> navegará até os filhos de um nó onde o tipo não seja <literal>BlockQuote</literal> ou <literal>Paragraph</literal>.
     </para>
   </formalpara>
   <formalpara>
    <title>Restrições em Caminhos</title>
     <para>
      A CQL pode ser instruída a criar um laço para navegar até um nó de um determinado tipo, em um determinado caminho. Por exemplo, <literal>/firstChild(BlockQuote)</literal> navegará até o primeiro nó filho onde o tipo seja <literal>BlockQuote</literal>. Observe que como em outros laços para <literal>children</literal> e <literal>siblings</literal>, este tipo de caminho só pode ser seguido por uma sub-consulta.
     </para>
   </formalpara>
   <formalpara>
    <title>Notas de Implementação</title>
    <para>
    Mesmo que a CQL tenha sido implementada como parte da extensão PHP CommonMark, ela é separada do PHP e não usa a máquina virtual ou a representação interna de valores do PHP.
   </para>
   </formalpara>
  </section>
<!-- }}} -->

  <section xml:id="commonmark-cql.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>CommonMark\CQL</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>CommonMark\CQL</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Constructor;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('commonmark-cql.construct')/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.commonmark-cql')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

  &reference.cmark.commonmark.cql.construct;
  &reference.cmark.commonmark.cql.invoke;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
