<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 72605fc9de80bd30f50b112e447326dfe6c2a523 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Analisa uma URL e retorna seus componentes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>string</type><type>array</type><type>null</type><type>false</type></type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>component</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta função analisa uma URL e retorna um array associativo contendo cada
   um dos vários componentes da URL presentes.
   Os valores dos elementos do array <emphasis>não</emphasis> são decodificados como URL.
  </para>
  <para>
   Esta função <emphasis role="strong">não</emphasis> se destina a validar
   o URL fornecido, apenas o divide nas partes listadas abaixo. URLs parciais e inválidos
   também são aceitos. <function>parse_url</function> faz o possível para
   analisá-los corretamente.
  </para>
  <caution>
   <para>
    Esta função pode não fornecer resultados corretos para URLs relativos ou inválidos,
    e os resultados podem nem mesmo corresponder ao comportamento comum de clientes HTTP.
    Se URLs de entradas não confiáveis ​​precisarem ser analisados, será necessária validação
    extra, por exemplo, usando <function>filter_var</function> com o
    filtro <constant>FILTER_VALIDATE_URL</constant>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       A URL a ser analisada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>component</parameter></term>
     <listitem>
      <para>
       Deve ser especificada uma das constantes <constant>PHP_URL_SCHEME</constant>,
       <constant>PHP_URL_HOST</constant>, <constant>PHP_URL_PORT</constant>,
       <constant>PHP_URL_USER</constant>, <constant>PHP_URL_PASS</constant>,
       <constant>PHP_URL_PATH</constant>, <constant>PHP_URL_QUERY</constant>
       ou <constant>PHP_URL_FRAGMENT</constant> para recuperar apenas um componente
       específico da URL como uma <type>string</type> (exceto quando
       <constant>PHP_URL_PORT</constant> for informada, que no caso o valor
       de retorno será um <type>int</type>).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Em URLs gravemente malformados, <function>parse_url</function> pode retornar
   &false;.
  </para>
  <para>
   Se o parâmetro <parameter>component</parameter> for omitido, um
   <type>array</type> associativo será retornado. Pelo menos um elemento estará
   presente no array. As potenciais chaves dentro deste array são:
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme</varname> - ex.: http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query</varname> - após o ponto de interrogação <literal>?</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> - após a cerquilha <literal>#</literal>
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Se o parâmetro <parameter>component</parameter> for especificado,
   <function>parse_url</function> retornará uma <type>string</type> (ou um
   <type>int</type>, no caso de <constant>PHP_URL_PORT</constant>)
   em vez de um <type>array</type>. Se o componente solicitado não existir
   no URL fornecido, &null; será retornado.
   A partir do PHP 8.0.0, <function>parse_url</function> diferencia consultas e fragmentos
   ausentes de vazios:
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
http://example.com/foo → consulta = null, fragmento = null
http://example.com/foo? → consulta = "",   fragmento = null
http://example.com/foo# → consulta = null, fragmento = ""
http://example.com/foo?# → consulta = "",   fragmento = ""
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Anteriormente, todos os casos resultavam em consulta e fragmento &null;.
  </para>
  <para>
   Observe que os caracteres de controle (compare com <function>ctype_cntrl</function>) nos
   componentes são substituídos por sublinhados (<literal>_</literal>).
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>parse_url</function> agora diferencia consultas e fragmentos vazios
       de ausantes.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <function>parse_url</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname:9090/path?arg=value#anchor';

var_dump(parse_url($url));
var_dump(parse_url($url, PHP_URL_SCHEME));
var_dump(parse_url($url, PHP_URL_USER));
var_dump(parse_url($url, PHP_URL_PASS));
var_dump(parse_url($url, PHP_URL_HOST));
var_dump(parse_url($url, PHP_URL_PORT));
var_dump(parse_url($url, PHP_URL_PATH));
var_dump(parse_url($url, PHP_URL_QUERY));
var_dump(parse_url($url, PHP_URL_FRAGMENT));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["scheme"]=>
  string(4) "http"
  ["host"]=>
  string(8) "hostname"
  ["port"]=>
  int(9090)
  ["user"]=>
  string(8) "username"
  ["pass"]=>
  string(8) "password"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(9) "arg=value"
  ["fragment"]=>
  string(6) "anchor"
}
string(4) "http"
string(8) "username"
string(8) "password"
string(8) "hostname"
int(9090)
string(5) "/path"
string(9) "arg=value"
string(6) "anchor"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Um exemplo de <function>parse_url</function> com esquema ausente</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = '//www.example.com/path?googleguy=googley';

// Antes do PHP 5.4.7, o "path" seria "//www.example.com/path"
var_dump(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["host"]=>
  string(15) "www.example.com"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(17) "googleguy=googley"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Esta função destina-se especificamente à análise de URLs e
    não de URIs. No entanto, para cumprir os requisitos de compatibilidade com versões
    anteriores do PHP, ele abre uma exceção para o esquema file:// onde barras
    triplas (file:///...) são permitidas. Para qualquer outro esquema isto é inválido.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
    <member><link xlink:href="&url.rfc;3986">RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
