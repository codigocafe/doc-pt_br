<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: leonardolara Status: ready -->
<refentry xml:id="pdostatement.bindparam" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::bindParam</refname>
  <refpurpose>
   Vincula um parâmetro ao nome de variável especificado
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::bindParam</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>maxLength</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>driverOptions</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Vincula uma variável PHP a um marcador nomeado ou de ponto de interrogação correspondente
   na instrução SQL que foi usada para preparar a instrução. Ao contrário de
   <methodname>PDOStatement::bindValue</methodname>, a variável é vinculada como uma
   referência e só será avaliada no momento em que
   <methodname>PDOStatement::execute</methodname> for chamado.
  </para>
  <para>
   A maioria dos parâmetros são parâmetros de entrada, ou seja, parâmetros que são usados
   ​​somente leitura para construir a consulta (mas podem, mesmo assim, ser convertidos
   de acordo com o <parameter>type</parameter>). Alguns drivers suportam a
   invocação de procedimentos armazenados que retornam dados como parâmetros de saída,
   e alguns também como parâmetros de entrada/saída que tanto enviam dados quanto são
   atualizados para recebê-los.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>param</parameter></term>
      <listitem>
       <para>
        Identificador de parâmetro. Para uma instrução preparada usando marcadores
        nomeados, este será um nome de parâmetro no formato
        <varname>:name</varname>. Para uma instrução preparada usando
        marcadores de pontos de interrogação, esta será a posição indexada em 1
        do parâmetro.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
      <listitem>
       <para>
        Nome da variável PHP a ser vinculada ao parâmetro da instrução SQL.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Tipo explícito de dados para o parâmetro usando as <link linkend="pdo.constants">constantes
        <literal>PDO::PARAM_*</literal></link>.
        Para retornar um parâmetro INOUT de um procedimento armazenado,
        deve-se usar o operador binário OR para definir os bits <constant>PDO::PARAM_INPUT_OUTPUT</constant>
        para o parâmetro <parameter>type</parameter>.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>maxLength</parameter></term>
      <listitem>
       <para>
        Comprimento do tipo de dados. Para indicar que um parâmetro é um parâmetro
        OUT de um procedimento armazenado, deve-se definir explicitamente o
        comprimento.
        Significativo apenas quando o parâmetro <parameter>type</parameter> é <constant>PDO::PARAM_INPUT_OUTPUT</constant>.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>driverOptions</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example><title>Executando uma instrução preparada com marcadores nomeados</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Executa uma instrução preparada vinculando variáveis ​​PHP */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam('calories', $calories, PDO::PARAM_INT);
/* Os nomes podem ser prefixados com dois pontos ":" também (opcional) */
$sth->bindParam(':colour', $colour, PDO::PARAM_STR);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example><title>Executando uma instrução preparada com marcadores com pontos de interrogação</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Executa uma instrução preparada vinculando variáveis ​​PHP */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

<!--
  <example><title>Passando um valor NULL para uma instrução preparada</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Executa uma instrução preparada vinculando variáveis ​​PHP */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);

/* Encontra frutas com valor NULL na coluna de cores */
$sth->bindParam(':colour', $colour, PDO::PARAM_NULL);

$sth->execute();
?>
]]>
   </programlisting>
  </example>
-->
  <example><title>Chamando um procedimento armazenado com um parâmetro INOUT</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Chamando um procedimento armazenado com um parâmetro INOUT */
$colour = 'red';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $colour, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);
$sth->execute();
print "Após fazer um purê com a fruta, a cor é: $colour";
?>
]]>
   </programlisting>
  </example>

 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::bindValue</methodname></member>
   </simplelist>
  </para>

 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
