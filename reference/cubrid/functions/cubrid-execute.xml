<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 648875cf73af01acdb6afaa5ca38b0bf6631bf42 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<refentry xml:id="function.cubrid-execute" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_execute</refname>
  <refpurpose>Executa uma instrução preparada SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>conn_identifier</parameter></methodparam>
   <methodparam><type>string</type><parameter>sql</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>option</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>bool</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>request_identifier</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>option</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   A função <function>cubrid_execute</function> é usada para executar a
   instrução SQL fornecida. Ela executa a consulta usando
   <parameter>conn_identifier</parameter> e a instrução SQL, e então retorna o
   identificador de requisição criado. É usada para execução simples de consulta,
   onde a vinculação de parâmetros não é necessária. Além disso, a
   função <function>cubrid_execute</function> é usada para executar a
   instrução preparada por meio de <function>cubrid_prepare</function> e
   <function>cubrid_bind</function>. Neste momento, é necessário especificar
   argumentos de <parameter>request_identifier</parameter>
   e <parameter>option</parameter>.
  </para>
  <para>
   O parâmetro <parameter>option</parameter> é usado para determinar se o OID
   deve ser obtido após a execução da consulta e se a consulta deve ser executada em modo
   síncrono ou assíncrono. <constant>CUBRID_INCLUDE_OID</constant> e <constant>CUBRID_ASYNC</constant> (ou
   <constant>CUBRID_EXEC_QUERY_ALL</constant> se a intenção for executar múltiplas instruções SQL) podem
   ser especificadas usando um operador OR bit a bit. Se não for especificado, nenhuma delas
   será selecionada. Se a opção <constant>CUBRID_EXEC_QUERY_ALL</constant> estiver definida, um modo
   síncrono (sync_mode) será usado para recuperar os resultados da consulta e, nesses casos, as
   seguintes regras serão aplicadas:
  </para>
  <para>
   <simplelist>
    <member>O valor de retorno é o resultado da primeira consulta.</member>
    <member>
     Se ocorrer um erro em alguma consulta, a execução será processada como
     uma falha.
    </member>
    <member>
     Em uma consulta composta por q1 q2 q3, se ocorrer um erro
     em q2 após q1 ter sucesso na execução, o resultado de q1 permanecerá
     válido. Ou seja, as execuções de consulta anteriores bem-sucedidas não são
     revertidas quando ocorre um erro.
    </member>
    <member>
     Se uma consulta for executada com sucesso, o resultado da segunda consulta pode
     ser obtido usando <function>cubrid_next_result</function>.
    </member>
   </simplelist>
  </para>
  <para>
   Se o primeiro argumento for <parameter>request_identifier</parameter> para
   executar a função <function>cubrid_prepare</function>, pode-se especificar
   uma opção, apenas <constant>CUBRID_ASYNC</constant>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_identifier</parameter></term>
     <listitem><para>Identificador da conexão.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem><para>Instrução SQL a ser executada.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>option</parameter></term>
     <listitem><para>Opção de execução da consulta: <constant>CUBRID_INCLUDE_OID</constant>, <constant>CUBRID_ASYNC</constant> ou <constant>CUBRID_EXEC_QUERY_ALL</constant>.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>request_identifier</parameter></term>
     <listitem><para>Identificador de <function>cubrid_prepare</function>.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Identificador da requisição, em caso de sucesso e quando o primeiro parâmetro for
   conn_identifier; &true;, em caso de sucesso e quando o primeiro parâmetro for
   request_identifier,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.4.0</entry>
       <entry>
        Adicionada a nova opção <constant>CUBRID_EXEC_QUERY_ALL</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>cubrid_execute</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = cubrid_connect("localhost", 33000, "demodb");

$result = cubrid_execute($conn, "SELECT code FROM event WHERE name='100m Butterfly' and gender='M'", CUBRID_ASYNC);
$row = cubrid_fetch_array($result, CUBRID_ASSOC);
$event_code = $row["code"];

cubrid_close_request($result);

$history_req = cubrid_prepare($conn, "SELECT * FROM history WHERE event_code=?");
cubrid_bind($history_req, 1, $event_code, "number");
cubrid_execute($history_req);

printf("%-20s %-9s %-10s %-5s\n", "Atleta", "Ano", "Pontos", "Unidade");
while ($row = cubrid_fetch_array($history_req, CUBRID_ASSOC)) {
    printf("%-20s %-9s %-10s %-5s\n",
        $row["athlete"], $row["host_year"], $row["score"], $row["unit"]);
}

cubrid_close_request($history_req);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Atleta               Ano       Pontos     Unidade
Phelps Michael       2004      51.25      time
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_prepare</function></member>
    <member><function>cubrid_bind</function></member>
    <member><function>cubrid_next_result</function></member>
    <member><function>cubrid_close_request</function></member>
    <member><function>cubrid_commit</function></member>
    <member><function>cubrid_rollback</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
