<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 62aa2694baf7fe904744a9b0f8a2a26e7fc3cf12 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Escapa os caracteres especiais em uma string para uso em uma instrução SQL</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   &mysql.alternative.note;
   <simplelist role="alternatives">
    <member><function>mysqli_real_escape_string</function></member>
    <member><methodname>PDO::quote</methodname></member>
   </simplelist>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter><initializer>NULL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Escapa caracteres especiais do parâmtro <parameter>unescaped_string</parameter>,
   levando em conta o conjunto de caracteres atual da conexão, de forma que seja
   seguro inseri-la na função <function>mysql_query</function>. Se forem inseridos
   dados binários, esta função precisa ser usada.
  </para>
  <para>
   <function>mysql_real_escape_string</function> cchama a função mysql_real_escape_string
   da biblioteca do MySQL, que prefixa com barras invertidas os seguintes caracteres:
   <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> e <literal>\x1a</literal>.
  </para>
  <para>
   Esta função precisa sempre ser usada (com poucas exceções) para tornar os dados
   seguros antes de enviá-los em uma consulta ao MySQL.
  </para>

  <caution>
   <title>Segurança: o conjunto de caracteres padrão</title>
   <para>
    O conjunto de caracteres precisa ser definido no nível do servidor ou com
    a função <function>mysql_set_charset</function> da API para que afete a função
    <function>mysql_real_escape_string</function>. Consulte a seção de conceitos sobre
    <link linkend="mysqlinfo.concepts.charset">conjuntos de caracteres</link> para
    mais informação.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
       A string a ser escapada.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a string escapada ou &false; em caso de erro.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Executar esta função sem uma conexão MySQL presente emitirá
   um erro de nível <constant>E_WARNING</constant>. Esta função
   deve ser executada somente comuma conexão MySQL válida presente.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Connect
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Query
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
            mysql_real_escape_string($user),
            mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_real_escape_string</function> requer um exemplo de conexão</title>
    <para>
     Este exemplo demonstra o que acontece se uma conexão MySQL não estiver
     presente ao chamar esta função.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Ainda não foi feita conexão ao MySQL

$lastname  = "O'Reilly";
$_lastname = mysql_real_escape_string($lastname);

$query = "SELECT * FROM actors WHERE last_name = '$_lastname'";

var_dump($_lastname);
var_dump($query);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Warning: mysql_real_escape_string(): No such file or directory in /this/test/script.php on line 5
Warning: mysql_real_escape_string(): A link to the server could not be established in /this/test/script.php on line 5

bool(false)
string(41) "SELECT * FROM actors WHERE last_name = ''"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Um exemplo de Ataque de Injeção SQL</title>
    <programlisting role="php">
<![CDATA[
<?php
// Não verificamos $_POST['password'], ela pode conter qualquer coisa que o usuário quiser! Por exemplo:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Consulta o banco de dados para verificar se existe algum usuário correspondente
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// Isto significa que a consulta enviada ao MySQL seria:
echo $query;
?>
]]>
    </programlisting>
     <para>
      A consulta enviada ao MySQL:
     </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Isto permitiria que qualquer pessoa fizesse login sem uma senha válida.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Uma conexão MySQL é requerida antes que
    <function>mysql_real_escape_string</function> seja usada, caso contrário um erro de
    nível <constant>E_WARNING</constant> será gerado e &false; é
    retornado. Se <parameter>link_identifier</parameter> não estiver definido, a
    últimoa conexão MySQL será usada.
   </para>
  </note>
  <note>
   <para>
    Se esta função não for usada para escapar dados, a consulta ficará vulnerável a
    <link linkend="security.database.sql-injection">Ataques de Injeção SQL</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> não escapa
    <literal>%</literal> e <literal>_</literal>. Estes caracteres são coringas no
    MySQL se combinados com <literal>LIKE</literal>, <literal>GRANT</literal>
    ou <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_set_charset</function></member>
    <member><function>mysql_client_encoding</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
